generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SECRETARIA
}

enum AppoimentsStatus {
  SCHEDULED
  CONFIRMED
  WAITING_APPOIMENT
  IN_APPOINTMENT
  FINISIHED
  CANCELED
  GIVEN_UP
  NO_SHOW
}

model Users {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  photo        String?
  role         Role      @default(SECRETARIA)
  active       Boolean   @default(true)
  birth_date   String?
  tempPassword Boolean   @default(false)
  lastLogin    DateTime?

  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Appoiments         Appoiments[]
  PasswordResetToken PasswordResetToken?
  EmailResetToken    EmailResetToken?
}

model ExamTypes {
  id                     String  @id @default(uuid())
  name                   String
  description            String?
  defaultDuration        String
  preparationInstruction String
  active                 Boolean

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Appoiments Appoiments[]
}

model Appoiments {
  id                 String           @id @default(uuid())
  patient_cpf        String
  patient_name       String
  patient_phone      String
  patient_email      String
  patient_birth_date String
  user               Users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  examsType          ExamTypes        @relation(fields: [examsTypeId], references: [id], onDelete: Cascade)
  examsTypeId        String
  date_start         DateTime
  date_end           DateTime
  status             AppoimentsStatus @default(SCHEDULED)
  details            String
  statusDetails      String?
  confirmationDate   DateTime?
  finishedDate      DateTime?
  canceledDate      DateTime?
  givenUpDate       DateTime?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  WaitingList WaitingList[]
}

model SystemConfig {
  id             Int     @id @default(1)
  initialized    Boolean @default(false)
  maxWaitTimeMin Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  user      Users    @relation(fields: [userId], references: [id])
  userId    String   @unique
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model EmailResetToken {
  id        String   @id @default(uuid())
  newEmail  String   @unique
  user      Users    @relation(fields: [userId], references: [id])
  userId    String   @unique
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model WaitingList {
  id          String     @id @default(uuid())
  order       Int
  appoiment   Appoiments @relation(fields: [appoimentId], references: [id], onDelete: Cascade)
  appoimentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
